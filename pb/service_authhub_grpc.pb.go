// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: service_authhub.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthHub_RecognizeTextAuto_FullMethodName = "/pb.AuthHub/RecognizeTextAuto"
	AuthHub_OpenOcr_FullMethodName           = "/pb.AuthHub/OpenOcr"
	AuthHub_GenerateImg_FullMethodName       = "/pb.AuthHub/GenerateImg"
)

// AuthHubClient is the client API for AuthHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthHubClient interface {
	RecognizeTextAuto(ctx context.Context, in *RecognizeTextAutoRequest, opts ...grpc.CallOption) (*RecognizeTextAutoResponse, error)
	OpenOcr(ctx context.Context, in *OpenOcrRequest, opts ...grpc.CallOption) (*OpenOcrResponse, error)
	GenerateImg(ctx context.Context, in *GenerateImgRequest, opts ...grpc.CallOption) (*GenerateImgResponse, error)
}

type authHubClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthHubClient(cc grpc.ClientConnInterface) AuthHubClient {
	return &authHubClient{cc}
}

func (c *authHubClient) RecognizeTextAuto(ctx context.Context, in *RecognizeTextAutoRequest, opts ...grpc.CallOption) (*RecognizeTextAutoResponse, error) {
	out := new(RecognizeTextAutoResponse)
	err := c.cc.Invoke(ctx, AuthHub_RecognizeTextAuto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authHubClient) OpenOcr(ctx context.Context, in *OpenOcrRequest, opts ...grpc.CallOption) (*OpenOcrResponse, error) {
	out := new(OpenOcrResponse)
	err := c.cc.Invoke(ctx, AuthHub_OpenOcr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authHubClient) GenerateImg(ctx context.Context, in *GenerateImgRequest, opts ...grpc.CallOption) (*GenerateImgResponse, error) {
	out := new(GenerateImgResponse)
	err := c.cc.Invoke(ctx, AuthHub_GenerateImg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthHubServer is the server API for AuthHub service.
// All implementations must embed UnimplementedAuthHubServer
// for forward compatibility
type AuthHubServer interface {
	RecognizeTextAuto(context.Context, *RecognizeTextAutoRequest) (*RecognizeTextAutoResponse, error)
	OpenOcr(context.Context, *OpenOcrRequest) (*OpenOcrResponse, error)
	GenerateImg(context.Context, *GenerateImgRequest) (*GenerateImgResponse, error)
	mustEmbedUnimplementedAuthHubServer()
}

// UnimplementedAuthHubServer must be embedded to have forward compatible implementations.
type UnimplementedAuthHubServer struct {
}

func (UnimplementedAuthHubServer) RecognizeTextAuto(context.Context, *RecognizeTextAutoRequest) (*RecognizeTextAutoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeTextAuto not implemented")
}
func (UnimplementedAuthHubServer) OpenOcr(context.Context, *OpenOcrRequest) (*OpenOcrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenOcr not implemented")
}
func (UnimplementedAuthHubServer) GenerateImg(context.Context, *GenerateImgRequest) (*GenerateImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImg not implemented")
}
func (UnimplementedAuthHubServer) mustEmbedUnimplementedAuthHubServer() {}

// UnsafeAuthHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthHubServer will
// result in compilation errors.
type UnsafeAuthHubServer interface {
	mustEmbedUnimplementedAuthHubServer()
}

func RegisterAuthHubServer(s grpc.ServiceRegistrar, srv AuthHubServer) {
	s.RegisterService(&AuthHub_ServiceDesc, srv)
}

func _AuthHub_RecognizeTextAuto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeTextAutoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHubServer).RecognizeTextAuto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHub_RecognizeTextAuto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHubServer).RecognizeTextAuto(ctx, req.(*RecognizeTextAutoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthHub_OpenOcr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOcrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHubServer).OpenOcr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHub_OpenOcr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHubServer).OpenOcr(ctx, req.(*OpenOcrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthHub_GenerateImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHubServer).GenerateImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHub_GenerateImg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHubServer).GenerateImg(ctx, req.(*GenerateImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthHub_ServiceDesc is the grpc.ServiceDesc for AuthHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthHub",
	HandlerType: (*AuthHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeTextAuto",
			Handler:    _AuthHub_RecognizeTextAuto_Handler,
		},
		{
			MethodName: "OpenOcr",
			Handler:    _AuthHub_OpenOcr_Handler,
		},
		{
			MethodName: "GenerateImg",
			Handler:    _AuthHub_GenerateImg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_authhub.proto",
}
