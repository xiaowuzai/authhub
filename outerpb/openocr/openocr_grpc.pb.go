// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: openocr/openocr.proto

package openocr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Openocr_RecognizeTextAuto_FullMethodName = "/openocr.Openocr/RecognizeTextAuto"
	Openocr_Openocr_FullMethodName           = "/openocr.Openocr/Openocr"
	Openocr_GenerateImg_FullMethodName       = "/openocr.Openocr/GenerateImg"
)

// OpenocrClient is the client API for Openocr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenocrClient interface {
	RecognizeTextAuto(ctx context.Context, in *RecognizeTextAutoRequest, opts ...grpc.CallOption) (*RecognizeTextResponse, error)
	Openocr(ctx context.Context, in *OpenocrRequest, opts ...grpc.CallOption) (*OpenocrResponse, error)
	GenerateImg(ctx context.Context, in *GenerateImgRequest, opts ...grpc.CallOption) (*GenerateImgResponse, error)
}

type openocrClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenocrClient(cc grpc.ClientConnInterface) OpenocrClient {
	return &openocrClient{cc}
}

func (c *openocrClient) RecognizeTextAuto(ctx context.Context, in *RecognizeTextAutoRequest, opts ...grpc.CallOption) (*RecognizeTextResponse, error) {
	out := new(RecognizeTextResponse)
	err := c.cc.Invoke(ctx, Openocr_RecognizeTextAuto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openocrClient) Openocr(ctx context.Context, in *OpenocrRequest, opts ...grpc.CallOption) (*OpenocrResponse, error) {
	out := new(OpenocrResponse)
	err := c.cc.Invoke(ctx, Openocr_Openocr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openocrClient) GenerateImg(ctx context.Context, in *GenerateImgRequest, opts ...grpc.CallOption) (*GenerateImgResponse, error) {
	out := new(GenerateImgResponse)
	err := c.cc.Invoke(ctx, Openocr_GenerateImg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenocrServer is the server API for Openocr service.
// All implementations must embed UnimplementedOpenocrServer
// for forward compatibility
type OpenocrServer interface {
	RecognizeTextAuto(context.Context, *RecognizeTextAutoRequest) (*RecognizeTextResponse, error)
	Openocr(context.Context, *OpenocrRequest) (*OpenocrResponse, error)
	GenerateImg(context.Context, *GenerateImgRequest) (*GenerateImgResponse, error)
	mustEmbedUnimplementedOpenocrServer()
}

// UnimplementedOpenocrServer must be embedded to have forward compatible implementations.
type UnimplementedOpenocrServer struct {
}

func (UnimplementedOpenocrServer) RecognizeTextAuto(context.Context, *RecognizeTextAutoRequest) (*RecognizeTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeTextAuto not implemented")
}
func (UnimplementedOpenocrServer) Openocr(context.Context, *OpenocrRequest) (*OpenocrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Openocr not implemented")
}
func (UnimplementedOpenocrServer) GenerateImg(context.Context, *GenerateImgRequest) (*GenerateImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImg not implemented")
}
func (UnimplementedOpenocrServer) mustEmbedUnimplementedOpenocrServer() {}

// UnsafeOpenocrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenocrServer will
// result in compilation errors.
type UnsafeOpenocrServer interface {
	mustEmbedUnimplementedOpenocrServer()
}

func RegisterOpenocrServer(s grpc.ServiceRegistrar, srv OpenocrServer) {
	s.RegisterService(&Openocr_ServiceDesc, srv)
}

func _Openocr_RecognizeTextAuto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeTextAutoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenocrServer).RecognizeTextAuto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Openocr_RecognizeTextAuto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenocrServer).RecognizeTextAuto(ctx, req.(*RecognizeTextAutoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openocr_Openocr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenocrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenocrServer).Openocr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Openocr_Openocr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenocrServer).Openocr(ctx, req.(*OpenocrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openocr_GenerateImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenocrServer).GenerateImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Openocr_GenerateImg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenocrServer).GenerateImg(ctx, req.(*GenerateImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Openocr_ServiceDesc is the grpc.ServiceDesc for Openocr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Openocr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openocr.Openocr",
	HandlerType: (*OpenocrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeTextAuto",
			Handler:    _Openocr_RecognizeTextAuto_Handler,
		},
		{
			MethodName: "Openocr",
			Handler:    _Openocr_Openocr_Handler,
		},
		{
			MethodName: "GenerateImg",
			Handler:    _Openocr_GenerateImg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openocr/openocr.proto",
}
